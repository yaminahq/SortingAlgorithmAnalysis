/**
 * Tests the sorting implementations for the job ADT
 * 
 * @file SortTest.java
 * @author Yaminah Qureshi
 * @version 1
 * @date 02/19/2018
 */
package sort;

/** 
 * Uses the junit library by Java
 */
import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/** 
 * Uses the util, StringTokenizer library by Java
 */
import java.util.StringTokenizer;

/** 
 * Uses the io library by Java
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

/**
 * tests and times sorting implementations using arrays of job objects
 */
public class SortTest {
	private Job[] array4 = new Job[(int) Math.pow(2, 4)];
	private Job[] array6 = new Job[(int) Math.pow(2, 6)];
	private Job[] array8 = new Job[(int) Math.pow(2, 8)];
	private Job[] array10 = new Job[(int) Math.pow(2, 10)];
	private Job[] array12 = new Job[(int) Math.pow(2, 12)];
	private Job[] array14 = new Job[(int) Math.pow(2, 14)];
	private Job[] array16 = new Job[(int) Math.pow(2, 16)];
	Stopwatch stopwatch;
	double startTime, endTime;
	

	/**
	 * Sets up for the testing
	 * Uses tokens generated by Gen class to create arrays of job objects
	 * 
	 * @throws java.lang.Exception if error in setup
	 */
	@Before
	public void setUp() throws Exception {
		stopwatch = new Stopwatch();
		BufferedReader br = new BufferedReader(new FileReader("data//a1_in.txt"));
		
		//array of 2^4 jobs generated
		String str4 = br.readLine(); 
		str4 = str4.replace("{", ""); str4 = str4.replace("}", ""); //modifies string to only contain job id and time separated by commas
		StringTokenizer st4 = new StringTokenizer(str4, ","); //each token is id or time in alternating order
		for (int i = 0; i < Math.pow(2,4); i++) {
			String jobID = st4.nextToken();
			int jobTime = Integer.parseInt(st4.nextToken());
			array4[i] = new Job(jobID, jobTime); //creates job object
		}
		
		//array of 2^6 jobs generated
		String str6 = br.readLine(); 
		str6 = str6.replace("{", ""); str6 = str6.replace("}", "");
		StringTokenizer st6 = new StringTokenizer(str6, ",");
		for (int i = 0; i < Math.pow(2,6); i++) {
			String jobID = st6.nextToken();
			int jobTime = Integer.parseInt(st6.nextToken());
			array6[i] = new Job(jobID, jobTime);
		}
		
		//array of 2^8 jobs generated
		String str8 = br.readLine(); 
		str8 = str8.replace("{", ""); str8 = str8.replace("}", "");
		StringTokenizer st8 = new StringTokenizer(str8, ",");
		for (int i = 0; i < Math.pow(2,8); i++) {
			String jobID = st8.nextToken();
			int jobTime = Integer.parseInt(st8.nextToken());
			array8[i] = new Job(jobID, jobTime);
		}
		
		//array of 2^10 jobs generated
		String str10 = br.readLine(); 
		str10 = str10.replace("{", ""); str10 = str10.replace("}", "");
		StringTokenizer st10 = new StringTokenizer(str10, ",");
		for (int i = 0; i < Math.pow(2,10); i++) {
			String jobID = st10.nextToken();
			int jobTime = Integer.parseInt(st10.nextToken());
			array10[i] = new Job(jobID, jobTime);
		}
		
		//array of 2^12 jobs generated
		String str12 = br.readLine(); 
		str12 = str12.replace("{", ""); str12 = str12.replace("}", "");
		StringTokenizer st12 = new StringTokenizer(str12, ",");
		for (int i = 0; i < Math.pow(2,12); i++) {
			String jobID = st12.nextToken();
			int jobTime = Integer.parseInt(st12.nextToken());
			array12[i] = new Job(jobID, jobTime);
		}
		
		 
		//array of 2^14 jobs generated
		String str14 = br.readLine(); 
		str14 = str14.replace("{", ""); str14 = str14.replace("}", "");
		StringTokenizer st14 = new StringTokenizer(str14, ",");
		for (int i = 0; i < Math.pow(2,14); i++) {
			String jobID = st14.nextToken();
			int jobTime = Integer.parseInt(st14.nextToken());
			array14[i] = new Job(jobID, jobTime);
		}
		
		//array of 2^16 jobs generated
		String str16 = br.readLine();
		str16 = str16.replace("{", ""); str16 = str16.replace("}", "");
		StringTokenizer st16 = new StringTokenizer(str16, ",");
		for (int i = 0; i < Math.pow(2,16); i++) {
			String jobID = st16.nextToken();
			int jobTime = Integer.parseInt(st16.nextToken());
			array16[i] = new Job(jobID, jobTime);
		}
	}
	
	/**
	 * @throws java.lang.Exception if error in teardown
	 */
	@After
	public void tearDown() throws Exception {
	}

	/**
	 * Tests and times regular insertion sort implementation for each array
	 * 
	 * @throws java.lang.AssertionError if test fails
	 */
	@Test
	public void testSortInsert() {
		System.out.println("Regular Insertion Sort");
		startTime = stopwatch.elapsedTime();
		Insertion.sortInsert(array4);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array4));
		System.out.println("2^4 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortInsert(array6);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array6));
		System.out.println("2^6 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortInsert(array8);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array8));
		System.out.println("2^8 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortInsert(array10);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array10));
		System.out.println("2^10 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortInsert(array12);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array12));
		System.out.println("2^12 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortInsert(array14);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array14));
		System.out.println("2^14 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortInsert(array16);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array16));
		System.out.println("2^16 execution time: "+ (endTime -startTime) );
		
	}
	
	/**
	 * Tests and times insertion sort using comparable implementation for each array
	 * 
	 * @throws java.lang.AssertionError if test fails
	 */
	@Test
	public void testInsertComparable() {
		System.out.println("Insertion Sort with Comparable Interface");
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortComparable(array4, array4.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array4));
		System.out.println("2^4 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortComparable(array6, array6.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array6));
		System.out.println("2^6 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortComparable(array8, array8.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array8));
		System.out.println("2^8 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortComparable(array10, array10.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array10));
		System.out.println("2^10 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortComparable(array12, array12.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array12));
		System.out.println("2^12 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortComparable(array14, array14.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array14));
		System.out.println("2^14 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortComparable(array16, array16.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array16));
		System.out.println("2^16 execution time: "+ (endTime -startTime) );
	}

	/**
	 * Tests and times binary search insertion sort implementation for each array
	 * 
	 * @throws java.lang.AssertionError if test fails
	 */
	@Test
	public void testInsertBinary() {
		System.out.println("Binary Search Insertion Sort");
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortBinary(array4, array4.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array4));
		System.out.println("2^4 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortBinary(array6, array6.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array6));
		System.out.println("2^6 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortBinary(array8, array8.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array8));
		System.out.println("2^8 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortBinary(array10, array10.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array10));
		System.out.println("2^10 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortBinary(array12, array12.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array12));
		System.out.println("2^12 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortBinary(array14, array14.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array14));
		System.out.println("2^14 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Insertion.sortBinary(array16, array16.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array16));
		System.out.println("2^16 execution time: "+ (endTime -startTime) );
		
	}
	
	/**
	 * Tests and times merge sort implementation for each array
	 * 
	 * @throws java.lang.AssertionError if test fails
	 */
	@Test
	public void testMerge() {
		System.out.println("Merge Sort");
		
		startTime = stopwatch.elapsedTime();
		Merge.sortMerge(array4, array4.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array4));
		System.out.println("2^4 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Merge.sortMerge(array6, array6.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array6));
		System.out.println("2^6 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Merge.sortMerge(array8, array8.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array8));
		System.out.println("2^8 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Merge.sortMerge(array10, array10.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array10));
		System.out.println("2^10 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Merge.sortMerge(array12, array12.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array12));
		System.out.println("2^12 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Merge.sortMerge(array14, array14.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array14));
		System.out.println("2^14 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Merge.sortMerge(array16, array16.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array16));
		System.out.println("2^16 execution time: "+ (endTime -startTime) );
	}
	
	/**
	 * Tests and times heap sort implementation for each array
	 * 
	 * @throws java.lang.AssertionError if test fails
	 */
	@Test
	public void testHeapSort() {
		System.out.println("Heap Sort");
		
		startTime = stopwatch.elapsedTime();
		Heap.sortHeap(array4, array4.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array4));
		System.out.println("2^4 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Heap.sortHeap(array6, array6.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array6));
		System.out.println("2^6 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Heap.sortHeap(array8, array8.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array8));
		System.out.println("2^8 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Heap.sortHeap(array10, array10.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array10));
		System.out.println("2^10 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Heap.sortHeap(array12, array12.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array12));
		System.out.println("2^12 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Heap.sortHeap(array14, array14.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array14));
		System.out.println("2^14 execution time: "+ (endTime -startTime) );
		
		startTime = stopwatch.elapsedTime();
		Heap.sortHeap(array16, array16.length);
		endTime = stopwatch.elapsedTime();
		assertTrue(isSorted(array16));
		System.out.println("2^16 execution time: "+ (endTime -startTime) );
	}
	
	/**
	 * determines if an array is sorted using Comparable compareTo method
	 * This code was retrieved from Algorithms Fourth edition by Robert Sedgewick and Kevin Wayne
	 * 
	 * @param a the array that is checked to see if it is sorted
	 * @return true if the array is in sorted order
	 */
	public static boolean isSorted(Comparable[] a){ 
		// Test whether the array entries are in order.
		for (int i = 1; i < a.length; i++)
			if (a[i].compareTo(a[i-1]) < 0) return false;
		return true;
		}
}
